#!/bin/sh

# Anticonf (tm) script by Pacha (2024)
# This script will query 'pkg-config' for the required cflags and ldflags.
# If pkg-config is unavailable or does not find the library, try setting
# INCLUDE_DIR and LIB_DIR manually via e.g:
# R CMD INSTALL --configure-vars='INCLUDE_DIR=/.../include LIB_DIR=/.../lib'

# Library settings
PKG_CONFIG_NAME="tesseract"
PKG_DEB_NAME="libtesseract-dev libleptonica-dev"
PKG_RPM_NAME="tesseract-devel leptonica-devel"
PKG_BREW_NAME="tesseract leptonica"
PKG_CFLAGS="-I/usr/include/leptonica"
PKG_LIBS="-ltesseract"

# Check for custom locations
if [ "$INCLUDE_DIR" ] || [ "$LIB_DIR" ]; then
  echo "Found INCLUDE_DIR and/or LIB_DIR!"
  PKG_CFLAGS="-I$INCLUDE_DIR $PKG_CFLAGS"
  PKG_LIBS="-L$LIB_DIR $PKG_LIBS"
  
# Use pkg-config if available
else
  pkg-config --version >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    # Request shared libraries specifically
    PKGCONFIG_CFLAGS=`pkg-config --cflags --silence-errors ${PKG_CONFIG_NAME}`
    PKGCONFIG_LIBS=`pkg-config --libs --silence-errors ${PKG_CONFIG_NAME}`
    
    if [ "$PKGCONFIG_CFLAGS" ] || [ "$PKGCONFIG_LIBS" ]; then
      echo "Found pkg-config cflags and libs!"
      PKG_CFLAGS="${PKGCONFIG_CFLAGS}"
      PKG_LIBS="${PKGCONFIG_LIBS}"
    fi
  fi
  
  # If pkg-config failed, try OS-specific fallbacks
  if [ -z "$PKG_LIBS" ] || [ "$PKG_LIBS" = "-ltesseract" ]; then
    # For MacOS, check common Homebrew and Macports locations
    if [ $(uname) = "Darwin" ]; then
      echo "Checking MacOS-specific paths..."
      
      # Homebrew ARM64 location (Apple Silicon)
      if [ -d "/opt/homebrew/include/tesseract" ] && [ -d "/opt/homebrew/lib" ]; then
        echo "Found Tesseract in Homebrew (ARM64)"
        PKG_CFLAGS="-I/opt/homebrew/include -I/opt/homebrew/include/leptonica"
        PKG_LIBS="-L/opt/homebrew/lib -ltesseract -llept"
      # Homebrew Intel location
      elif [ -d "/usr/local/include/tesseract" ] && [ -d "/usr/local/lib" ]; then
        echo "Found Tesseract in Homebrew (Intel)"
        PKG_CFLAGS="-I/usr/local/include -I/usr/local/include/leptonica"
        PKG_LIBS="-L/usr/local/lib -ltesseract -llept"
      # MacPorts location
      elif [ -d "/opt/local/include/tesseract" ] && [ -d "/opt/local/lib" ]; then
        echo "Found Tesseract in MacPorts"
        PKG_CFLAGS="-I/opt/local/include -I/opt/local/include/leptonica"
        PKG_LIBS="-L/opt/local/lib -ltesseract -llept"
      fi
    fi
  fi
fi

# Clean up PKG_CFLAGS and PKG_LIBS - remove newlines and ensure proper escaping
PKG_CFLAGS=$(echo "$PKG_CFLAGS" | tr '\n' ' ')
PKG_LIBS=$(echo "$PKG_LIBS" | tr '\n' ' ')

# Check if shared libraries are available
TESSERACT_LIB_PATH=$(echo $PKG_LIBS | grep -o -- "-L[^ ]*" | sed 's/-L//')
FOUND_SHARED_LIB=0

# For MacOS, find Homebrew's installation directly if needed
if [ $(uname) = "Darwin" ]; then
  # Add explicit Leptonica include path for macOS
  if echo "$PKG_CFLAGS" | grep -q "/include/leptonica"; then
    echo "Leptonica include path already present"
  else
    if [ -d "/opt/homebrew/include/leptonica" ]; then
      echo "Adding explicit Leptonica include path for macOS ARM"
      PKG_CFLAGS="$PKG_CFLAGS -I/opt/homebrew/include/leptonica"
    elif [ -d "/usr/local/include/leptonica" ]; then
      echo "Adding explicit Leptonica include path for macOS Intel"
      PKG_CFLAGS="$PKG_CFLAGS -I/usr/local/include/leptonica"
    fi
  fi
  
  # Find Homebrew's Cellar directly
  if [ -d "/opt/homebrew/Cellar/tesseract" ]; then
    TESSERACT_PATH=$(ls -d /opt/homebrew/Cellar/tesseract/* | sort -V | tail -1)
    LEPTONICA_PATH=$(ls -d /opt/homebrew/Cellar/leptonica/* | sort -V | tail -1)
    
    if [ -n "$TESSERACT_PATH" ] && [ -n "$LEPTONICA_PATH" ]; then
      echo "Using Homebrew tesseract at $TESSERACT_PATH"
      echo "Using Homebrew leptonica at $LEPTONICA_PATH"
      
      # Use specific Homebrew Cellar paths
      PKG_CFLAGS="-I$TESSERACT_PATH/include -I$TESSERACT_PATH/include/tesseract -I$LEPTONICA_PATH/include -I$LEPTONICA_PATH/include/leptonica"
      PKG_LIBS="-L$TESSERACT_PATH/lib -ltesseract -L$LEPTONICA_PATH/lib -lleptonica"
      
      # Check for shared library
      if [ -f "$TESSERACT_PATH/lib/libtesseract.dylib" ]; then
        echo "Found shared tesseract library in $TESSERACT_PATH/lib"
        FOUND_SHARED_LIB=1
      fi
    fi
  fi
  
  # Check for shared library in standard path
  if [ -n "$TESSERACT_LIB_PATH" ] && [ $FOUND_SHARED_LIB -eq 0 ]; then
    if [ -f "${TESSERACT_LIB_PATH}/libtesseract.dylib" ]; then
      echo "Found shared tesseract library in ${TESSERACT_LIB_PATH}"
      FOUND_SHARED_LIB=1
    fi
  fi
else
  # Linux/other OS
  if [ -n "$TESSERACT_LIB_PATH" ]; then
    if [ -f "${TESSERACT_LIB_PATH}/libtesseract.so" ]; then
      echo "Found shared tesseract library in ${TESSERACT_LIB_PATH}"
      FOUND_SHARED_LIB=1
    fi
  fi
fi

# If not found yet on Linux, check standard system paths
if [ $FOUND_SHARED_LIB -eq 0 ] && [ $(uname) != "Darwin" ]; then
  # Common locations for shared libraries on Linux
  for LIB_DIR in /usr/lib/x86_64-linux-gnu /usr/lib /usr/lib64 /lib/x86_64-linux-gnu
  do
    if [ -f "${LIB_DIR}/libtesseract.so" ]; then
      echo "Found shared tesseract library in ${LIB_DIR}"
      FOUND_SHARED_LIB=1
      
      # Update PKG_LIBS to use the found path
      PKG_LIBS="-L${LIB_DIR} -ltesseract"
      break
    fi
  done
fi

if [ $FOUND_SHARED_LIB -eq 0 ]; then
  echo "Warning: Shared tesseract library not found, attempting to use static library"
  echo "If compilation fails with PIC errors, please install the shared version of tesseract"
  
  # For distributions like Ubuntu, try to suggest the exact package
  if [ -f "/etc/lsb-release" ] && grep -q "Ubuntu" /etc/lsb-release; then
    echo "On Ubuntu, try: sudo apt-get install libtesseract-dev"
  elif [ $(uname) = "Darwin" ]; then
    echo "On macOS, try: brew install tesseract"
  fi
fi

echo "Using PKG_CFLAGS=${PKG_CFLAGS}"
echo "Using PKG_LIBS=${PKG_LIBS}"

# If we still haven't found the libraries, error out
if [ -z "$PKG_LIBS" ] || [ "$PKG_LIBS" = "-ltesseract" ]; then
  echo "--------------------------- [ANTICONF] --------------------------------"
  echo "Configuration failed to find tesseract library. Try installing:"
  echo " * deb: $PKG_DEB_NAME (Debian, Ubuntu, etc)"
  echo " * rpm: $PKG_RPM_NAME (Fedora, CentOS, RHEL)"
  echo " * brew: $PKG_BREW_NAME (Mac OSX)"
  echo "If tesseract is already installed, check that 'pkg-config' is in your"
  echo "PATH and PKG_CONFIG_PATH contains the tesseract.pc file. If pkg-config"
  echo "is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:"
  echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
  echo "-------------------------- [ERROR MESSAGE] ---------------------------"
  exit 1
fi

# Ensure we're using shared libraries not static ones
# Replace any static library references with dynamic ones
if [ $(uname) = "Darwin" ]; then
  PKG_LIBS=$(echo "$PKG_LIBS" | sed 's/\.a/.dylib/g')
  PKG_LIBS=$(echo "$PKG_LIBS" | sed 's/\.so/.dylib/g')
  
  # Add rpath for dylib on macOS
  LIB_PATH=$(echo $PKG_LIBS | grep -o '\-L[^ ]*' | head -1 | sed 's/-L//')
  if [ -n "$LIB_PATH" ]; then
    if ! echo "$PKG_LIBS" | grep -q '\-Wl,-rpath'; then
      PKG_LIBS="$PKG_LIBS -Wl,-rpath,$LIB_PATH"
    fi
  fi
else
  PKG_LIBS=$(echo "$PKG_LIBS" | sed 's/\.a/.so/g')
fi

# Check if the compiler is clang
if [ "$CC" = "clang" ] || [ "$CXX" = "clang++" ]; then
  CXX=clang++ -stdlib=libstdc++
  CXXFLAGS += -stdlib=libstdc++
  LDFLAGS += -stdlib=libstdc++
fi

# Tesseract 4 enforces C++11 in the headers but R does not have CXX11CPP
CPPFLAGS=`${R_HOME}/bin/R CMD config CPPFLAGS`
CXX11STD=`${R_HOME}/bin/R CMD config CXX11STD`
if [ $? -eq 0 ]; then
  CXX11=`${R_HOME}/bin/R CMD config CXX11`
  CXX11CPP="$CXX11 -E $CXX11STD"
  echo "Using CXX11CPP: ${CXX11CPP}"
else
  CXX11CPP=`${R_HOME}/bin/R CMD config CXXCPP`
  echo "Using CXX11CPP: ${CXX11CPP}"
fi

# Create test file to check which API to use
cat <<EOF > conftest.cpp
#include <tesseract/baseapi.h>
#include <string>

int main() {
  tesseract::TessBaseAPI api;
  std::string val;
  api.GetVariableAsString("test", &val);
  return 0;
}
EOF

# Set default to not using GetVariableAsString
HAS_GET_VARIABLE_AS_STRING="#undef TESSERACT_HAS_GETVARIABLEASSTRING"

if ${CXX11} -std=gnu++11 -c conftest.cpp -o conftest.o ${PKG_CFLAGS} 2>/dev/null; then
  # If compilation succeeded, GetVariableAsString is available
  HAS_GET_VARIABLE_AS_STRING="#define TESSERACT_HAS_GETVARIABLEASSTRING 1"
  echo "Using GetVariableAsString() API"
else
  echo "Using GetStringVariable() API (older version)"
fi

# Create the tesseract config header
cat <<EOF > src/tesseract_config.h
// Auto-generated by configure
${HAS_GET_VARIABLE_AS_STRING}
EOF

# Test Tesseract C++11 compatibility
cat <<EOF > conftest.cpp
#if __APPLE__
  #if __has_include(<leptonica/allheaders.h>)
    #include <leptonica/allheaders.h>
  #elif __has_include(<allheaders.h>)
    #include <allheaders.h>
  #else
    #error "Could not find allheaders.h"
  #endif
#else
  #include <allheaders.h>
#endif
#include <tesseract/baseapi.h>
int main() {
    tesseract::TessBaseAPI api;
    return 0;
}
EOF

# Test Tesseract
# Tesseract enforces C++11
if ! ${CXX11} -std=gnu++11 -c conftest.cpp -o conftest.o ${PKG_CFLAGS} 2>/dev/null; then
    echo "Tesseract requires C++11 support"
    rm -rf conftest.cpp conftest.o
    exit 1
else
    rm -rf conftest.cpp conftest.o
fi

# Also create a compatible version of cpp11tesseract_types.h with conditional includes
cat <<EOF > src/allheaders_include.h
// Auto-generated by configure
#if __APPLE__
  #if __has_include(<leptonica/allheaders.h>)
    #include <leptonica/allheaders.h>
  #elif __has_include(<allheaders.h>)
    #include <allheaders.h>
  #else
    #error "Could not find allheaders.h"
  #endif
#else
  #include <allheaders.h>
#endif
EOF

# Write to Makevars - use printf to avoid issues with special characters
rm -f src/Makevars
printf "PKG_CPPFLAGS=%s\n" "$PKG_CFLAGS" > src/Makevars
printf "PKG_LIBS=%s\n\n" "$PKG_LIBS" >> src/Makevars
echo "CXX_STD = CXX11" >> src/Makevars

# Success
exit 0
